AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  API_REST

  Sample SAM Template for API_REST

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 64

Resources:

  #DynamoDB
  Type: AWS::DynamoDB::Table
  Properties: 
    AttributeDefinitions: 
      - AttributeDefinition
    BillingMode: String
    ContributorInsightsSpecification: 
      - ContributorInsightsSpecification
    DeletionProtectionEnabled: Boolean
    GlobalSecondaryIndexes: 
      - GlobalSecondaryIndex
    ImportSourceSpecification: 
      - ImportSourceSpecification
    KeySchema: Json
    KinesisStreamSpecification: 
      - KinesisStreamSpecification
    LocalSecondaryIndexes: 
      - LocalSecondaryIndex
    PointInTimeRecoverySpecification: 
      - PointInTimeRecoverySpecification
    ProvisionedThroughput:
      ReadCapacityUnits: 5
      WriteCapacityUnits: 5
    SSESpecification: 
      - SSESpecification
    StreamSpecification: 
      - StreamSpecification
    TableClass: String
    TableName: Usuarios
    Tags: 
      - Tag
    TimeToLiveSpecification: 
      - TimeToLiveSpecification

  #Rol Sirve para conectar las funciones Lambda con la base de datos Dynamodb
  Type: AWS::IAM::Role
  Properties: 
    AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Description: String
    ManagedPolicyArns: 
      - String
    MaxSessionDuration: Integer
    Path: String
    PermissionsBoundary: String
    Policies:
        - PolicyName: acceso-dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
                - Effect: Allow
                  Action:
                  - dynamodb:CreateTable
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteTable
                  - dynamodb:UpdateTable
                  Resource: arn
    RoleName: lambda-dynamodb-role
    Tags: 
      - Tag

  #POST 4
  Lambda4POST:
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
        CodeUri: lambda/
        Handler: 4_POST.lambda_handler
        Runtime: python3.8
        Architectures:
        - x86_64
        Events:
          Publish:
            Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
            Properties:
              Path: /usuario/{id}
              Method: POST
  #GET 5
  Lambda5GET:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 5_GET.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Get_User_ID:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /usuario/{id}
            Method: GET

  #Funcion 6 DELETE
  Lambda6DELETE:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 6_DELETE.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Delete_User:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /usuario/{id}
            Method: DELETE

  #Funcion 7 PUT
  Lambda7PUT:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 7_PUT.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Update_User:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /usuario/{id}
            Method: PUT
  
  #Funcion 8 GET
  Lambda8GET:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 8_GET.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Get_Users:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /usuario
            Method: GET

  #Funcion 9 GET
  Lambda9GET:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 9_GET.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Get_Genere_User:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /genero/{id}
            Method: GET

  #Funcion 10 GET
  Lambda10GET:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: 10_GET.lambda_handler
      Runtime: python3.8
      Architectures:
      - x86_64
      Events:
        Get_Mayor:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /mayor/
            Method: GET


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
